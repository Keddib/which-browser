// Generated by CodiumAI

import { describe, expect, it } from "vitest";
import isEdge from ".";
import { BrowserType } from "../../types";

describe('isEdge', () => {

    // Tests that isEdge returns true when given BrowserType.Arc
    it('should return true when given BrowserType.Edge', () => {
      expect(isEdge(BrowserType.Edge)).toBe(true);
    });

    // Tests that isEdge returns false when given any other BrowserType
    it('should return false when given any other BrowserType', () => {
      expect(isEdge(BrowserType.Brave)).toBe(false);
      expect(isEdge(BrowserType.Browser)).toBe(false);
      expect(isEdge(BrowserType.Chrome)).toBe(false);
      expect(isEdge(BrowserType.Arc)).toBe(false);
      expect(isEdge(BrowserType.Firefox)).toBe(false);
      expect(isEdge(BrowserType.Opera)).toBe(false);
      expect(isEdge(BrowserType.Safari)).toBe(false);
    });

    // Tests that isEdge returns false when given undefined
    it('should return false when given undefined', () => {
      expect(isEdge(undefined as unknown as BrowserType)).toBe(false);
    });

    // Tests that isEdge returns false when given null
    it('should return false when given null', () => {
      expect(isEdge(null as unknown as BrowserType)).toBe(false);
    });

    // Tests that isEdge returns false when given a non-BrowserType value
    it('should return false when given a non-BrowserType value', () => {
      expect(isEdge('Arc' as BrowserType)).toBe(false);
      expect(isEdge(123 as unknown as BrowserType)).toBe(false);
      expect(isEdge(true as unknown as BrowserType)).toBe(false);
      expect(isEdge({} as unknown as BrowserType)).toBe(false);
      expect(isEdge([] as unknown as BrowserType)).toBe(false);
    });
});
