// Generated by CodiumAI

import { describe, expect, it } from "vitest";
import { BrowserType } from "../../types";
import isFireFox from ".";

describe('isFireFox', () => {

    // Tests that isFireFox returns true when passed BrowserType.Firefox
    it('should return true when passed BrowserType.Firefox', () => {
      expect(isFireFox(BrowserType.Firefox)).toBe(true);
    });

    // Tests that isFireFox returns false when passed any other BrowserType
    it('should return false when passed any other BrowserType', () => {
      const browserTypes = Object.values(BrowserType).filter(bt => bt !== BrowserType.Firefox);
      browserTypes.forEach(bt => {
        expect(isFireFox(bt)).toBe(false);
      });
    });

    // Tests that isFireFox returns false when passed null
    it('should return false when passed null', () => {
      expect(isFireFox(null as unknown as BrowserType)).toBe(false);
    });

    // Tests that isFireFox returns false when passed undefined
    it('should return false when passed undefined', () => {
      expect(isFireFox(undefined as unknown as BrowserType)).toBe(false);
    });

    // Tests that isFireFox returns false when passed a string that is not a valid BrowserType
    it('should return false when passed a string that is not a valid BrowserType', () => {
      const invalidBrowserTypes = ['Invalid', 'Test', '123'];
      invalidBrowserTypes.forEach(bt => {
        expect(isFireFox(bt as unknown as BrowserType)).toBe(false);
      });
    });

    // Tests that isFireFox returns false when passed a number, object, array, or boolean
    it('should return false when passed a number, object, array, or boolean', () => {
      const invalidValues = [123, {}, [], true];
      invalidValues.forEach(val => {
        expect(isFireFox(val as unknown as BrowserType)).toBe(false);
      });
    });
});
